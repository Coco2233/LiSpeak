#!/bin/bash

   # This program is free software: you can redistribute it and/or modify
   #  it under the terms of the GNU General Public License as published by
   #  the Free Software Foundation, either version 3 of the License, or
   #  (at your option) any later version.

   #  This program is distributed in the hope that it will be useful,
   #  but WITHOUT ANY WARRANTY; without even the implied warranty of
   #  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   #  GNU General Public License for more details.

   #  You should have received a copy of the GNU General Public License
   #  along with this program.  If not, see <http://www.gnu.org/licenses/>.
# TODO, make this use the mode, context and custom sed script

cd ${0%/*}

USER_DIR=$HOME/.lispeak
rm $HOME/.lispeak/bin/lispeak.py
rm $HOME/.lispeak/services/lispeak.py

while read line           
do          
	export "$line"        
done <$USER_DIR/UserInfo

# Try to run a command in ./Recognition/bin with useful errors.
function run_command() {
    eval "./Recognition/bin/$1"

    if [ $? != 0 ];then
        eval "~/.lispeak/bin/$1"
    fi

    if [ $? != 0 ];then
	./Recognition/bin/result Error "There was an error while running:" \
	"$1" ""
	exit 1
    fi
}

cd $ROOTDIR

echo $ROOTDIR

cp "./lispeak" "$HOME/.lispeak/bin/lispeak.py"
cp "./lispeak" "$HOME/.lispeak/services/lispeak.py"
cp "./lispeak" "./Recognition/bin/lispeak.py"
cp "./lispeak" "./Microphone/lispeak.py"

cp "./Setup/libraries/goslate.py" "$HOME/.lispeak/bin/"
cp "./Setup/libraries/goslate.py" "$HOME/.lispeak/services/"
cp "./Setup/libraries/goslate.py" "./Microphone/"

speech=$(eval "echo $1 | tr '[:upper:]' '[:lower:]'")

# Use sed scripts here.
if [ -z "$speech" ];then
    echo "Speech unable to be transcribed."
    ./Recognition/bin/result "Speech unable to be transcribed"
    exit 1
fi

rm Microphone/result 2>/dev/null


if [ -e "$USER_DIR/personal.dic" ];then
    COMMAND=$(./Recognition/dictionary "$speech" "$USER_DIR/personal.dic")

    EXIT=$?
    if [ "$EXIT" == 0 ];then

	run_command "$COMMAND"

	exit 0
    fi
    if [ "$EXIT" != 2 ];then
	echo "There is an error in $USER_DIR/personal.dic"
    fi
fi

./current
read process < PROCESS
echo "$USER_DIR/dictionaries/${process}.dic"
if [ -e "$USER_DIR/dictionaries/${process}.dic" ];then
    COMMAND=$(./Recognition/dictionary "$speech" "$USER_DIR/dictionaries/${process}.dic")

    EXIT=$?
    if [ "$EXIT" == 0 ];then

	run_command "$COMMAND"

	exit 0
    fi
    if [ "$EXIT" != 2 ];then
	echo "There is an error in $USER_DIR/dictionaries/${process}.dic"
    fi
fi

if [ -e "$USER_DIR/plugins.dic" ];then
    COMMAND=$(./Recognition/dictionary "$speech" "$USER_DIR/plugins.dic")

    EXIT=$?
    if [ "$EXIT" == 0 ];then

	run_command "$COMMAND"

	exit 0
    fi
    if [ "$EXIT" != 2 ];then
	echo "There is an error in $USER_DIR/plugins.dic"
    fi
fi

COMMAND=$(./Recognition/dictionary "$speech" "./Recognition/modes/main.dic")

echo $speech

EXIT=$?

if [ "$EXIT" == 0 ];then
    run_command "$COMMAND"
    exit 0
elif [ "$EXIT" == 2 ];then
    ./Recognition/bin/result Error "'$speech'" "is not a recognized command" ""

else 
    echo "There is an error in ${mode}.dic"
    ./Recognition/bin/result Error "There was an error while reading main.dic" \
	"$COMMAND" ""
fi
