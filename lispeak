#!/usr/bin/env python

VERSION = 1.1

import subprocess,sys,platform,tarfile,os,argparse,shutil,urllib2,time,pygtk
import sqlite3 as sql

import commands

DEPENDS_PAGE = 1
USER_INFO_PAGE = 2
PLUGIN_PAGE = 3
EXIT_PAGE = 4

home = subprocess.Popen("echo $HOME", shell=True, stdout=subprocess.PIPE).communicate()[0].replace('\n','')
root = home + "/.lispeak"

approvedDistros = {"Ubuntu":["13.10"]}

languages = {}

class InstallGUI:
    def __init__(self):
        filename = "lispeak.glade"
        self.builder = Gtk.Builder()
        self.builder.add_from_file(filename)
        self.builder.connect_signals(self)
        self.window = self.builder.get_object("window1")
        self.notebook = self.builder.get_object("ntbMain")
        self.nButton = self.builder.get_object("btnNext")
        self.nButton.connect("clicked", self.nextPage)
        self.cButton = self.builder.get_object("btnCenter")
        self.cButton.connect("clicked", self.centerClick)
        self.pButton = self.builder.get_object("btnBack")
        self.pButton.connect("clicked", self.prevPage)
        self.pButton.set_visible(False)
        self.window.set_title("LiSpeak Installation")
        self.window.show_all()
        self.window.connect("destroy", Gtk.main_quit)
        self.bxPlugins = self.builder.get_object("bxPlugins")
        self.notebook.append_page(self.bxPlugins,Gtk.Label("None"))
        self.builder.get_object("lblWelcome").set_text("Welcome to LiSpeak v"+str(VERSION))
        self.bxDone = self.builder.get_object("bxDone")
        self.notebook.append_page(self.bxDone,Gtk.Label("None1"))
        self.pButton.set_visible(False)
        self.processPage(0)
        self.loadedPlugins = False
        self.status = "cancel"
        
    def centerClick(self,widget):
        num = self.notebook.get_current_page()
        if num == DEPENDS_PAGE:
            cmd = self.needs
            cmd.insert(0,"pkexec")
            cmd.insert(1,"apt-get")
            cmd.insert(2,"install")
            cmd.append("-y")
            subprocess.check_call(cmd)
            self.notebook.next_page()
            new = self.notebook.get_current_page()
            self.processPage(new)
        elif num == PLUGIN_PAGE:
            for p,label,switch in self.plugins:
                if switch.get_active():
                    downloadPackage(p)
            self.notebook.next_page()
            new = self.notebook.get_current_page()
            self.processPage(new)
        
    def processPage(self,num,forward=True):
        if num != 0:
            self.pButton.set_visible(True)
        else:
            self.pButton.set_visible(False)
        if num in [DEPENDS_PAGE,PLUGIN_PAGE]:
            self.cButton.set_visible(True)
        else:
            self.cButton.set_visible(False)
        if num == EXIT_PAGE:
            self.nButton.set_label("Exit")
        elif num == PLUGIN_PAGE:
            self.nButton.set_label("Skip")
        else:
            self.nButton.set_label("Continue")
        if num == DEPENDS_PAGE:
            self.nButton.set_label("Skip Dependencies")
            depends = ["sox","python-argparse","wget","espeak","xautomation","xvkbd","python-appindicator","xdotool"]
            self.needs = []
            try:
                resp = commands.getstatusoutput("dpkg --get-selections | grep -v deinstall > packages")[1]
                installed = []
                with open("packages") as pack:
                    for l in pack:
                        installed.append(l.replace("\t","").replace(" ","").replace("install","").replace("\n",""))
                for d in depends:
                    if d not in installed:
                        self.needs.append(d)
                if len(self.needs) == 0:
                    if forward:
                        self.notebook.next_page()
                    else:
                        self.notebook.prev_page()
                    new = self.notebook.get_current_page()
                    self.processPage(new)
                else:
                    self.dlist = self.builder.get_object("lblDependsList")
                    text = ""
                    for n in self.needs:
                        text = text + n + "\n"
                    self.dlist.set_text(text)
            except:
                debug("Error Checking For Dependencies")
                self.notebook.next_page()
        
        elif num == PLUGIN_PAGE and self.loadedPlugins == False:
            self.newPlugins = []
            plugins = urllib2.urlopen("http://lispeak.bmandesigns.com/functions.php?f=corePlugins").read().split("|#|")
            for p in plugins:
                if p != "":
                    self.newPlugins.append(p)
            self.pluginGrid = self.builder.get_object("grdPluginList")
            self.plugins = []
            x = 0
            for p in self.newPlugins:
                label = Gtk.Label(p)
                switch = Gtk.Switch()
                switch.set_active(True)
                switch.set_halign(Gtk.Align.CENTER)
                switch.set_valign(Gtk.Align.CENTER)
                self.pluginGrid.attach(label,0,x,1,1)
                self.pluginGrid.attach(switch,1,x,1,1)
                label.show()
                switch.show()
                self.plugins.append([p,label,switch])
                x = x + 1
            self.loadedPlugins = True
            
    def nextPage(self,widget):
        if self.notebook.get_current_page() == USER_INFO_PAGE:
            self.userinfo = {}
            for e in ['first','last','lang','email','wolf']:
                self.userinfo[e.upper()] = self.builder.get_object('ent'+e[0].upper()+e[1:]).get_text()
            self.userinfo["ESPEAK"] = str(self.builder.get_object("swEspeak").get_active())
            writeInfo(self.userinfo)
        elif self.notebook.get_current_page() == EXIT_PAGE:
            self.status = "good"
            Gtk.main_quit()
        self.notebook.next_page()
        new = self.notebook.get_current_page()
        
        self.processPage(new,True)
        
    def prevPage(self,widget):
        self.notebook.prev_page()
        new = self.notebook.get_current_page()
        self.processPage(new,False)

def displayInstaller():
    app = InstallGUI()
    Gtk.main()
    return app

def yn(text = "Continue?",exit=False):
    if force == False:
        yna = raw_input(translate(text)+" (y/n) ")
        if yna.lower() in ['yes','y','sure','why not','go for it','have at it','okay','yup','yep']:
            return True
        else:
            if exit == True:
                sys.exit(1)
            else:
                return False
    else:
        return True

def setup():
    displayOSWarning()
    touch(installDir+"/Recognition/dictionary.c")
    cd("Recognition")
    call("make")
    cd(installDir)
    delete([installDir+"/Recognition/modes/main.dic",installDir+"/Recognition/bin/",root,installDir+"/Recognition/dictionary.c"])
    createDirectory([root,root+"/configs",root+"/modes"])
    touch([home+"/.lispeak/UserInfo",root+"/plugins.db",root+"/plugins.dic",installDir+"/Recognition/modes/main.dic",root+"/MODE"])
    copy([
        [installDir+"/Setup/defaults/bin/",      installDir+"/Recognition/bin/"],
        [installDir+"/Setup/defaults/main.dic", installDir+"/Recognition/modes/main.dic"],
        [installDir+"/Setup/languages/", root+"/configs/"]
    ])
    gui = displayInstaller()
    if gui.status == "good":
        os.system("nohup Recognition/bin/goto 'http://lispeak.bmandesigns.com/thanks' \"nohup.out\" &")
        os.system("./start")
    #dialogInfo("Done, you will have to setup the hotkey yourself.\n\nLiSpeak needs to be started with: ^./lispeak --start^")
def loadLanguage(lang="en"):
    languages[lang.lower()] = getInfo("Language-"+lang.lower())
def copyLibraries():
    #[installDir+"/Setup/libraries/", [installDir+"/",installDir+"/Recognition/bin/"]]
    libraries = os.listdir(installDir+"/Setup/libraries")
    for l in libraries:
        copy(installDir+"/Setup/libraries/"+l,[installDir+"/"+l,installDir+"/Recognition/bin/"+l])
def downloadPackage(name,install=True):
    f = urllib2.urlopen("http://lispeak.bmandesigns.com/functions.php?f=download&t=name&s="+name)
    with open(installDir+'/tmp.tar.gz', "wb") as local_file:
        local_file.write(f.read())
    time.sleep(0.2)
    installPlugin(installDir+'/tmp.tar.gz')
    delete(installDir+"/tmp.tar.gz")
def sudo(cmd):
    cmd.insert(0,"pkexec")
    if quiet:
        display = False
    else:
        if debug:
            display = True
        else:
            display = False
def translate(text,lang=False):
    text = str(text).replace("\n","_NL_").replace("\t","_TB_")
    paths = []
    replaces = []
    x = 0
    while "^" in text:
        scan = False
        ntext = ""
        ntext2 = ""
        for l in text:
            if l == "^" and scan == False:
                scan = True
                ntext2 = ntext2 + l
            elif l != "^" and scan == True:
                ntext = ntext + l
                ntext2 = ntext2 + l
            elif l == "^" and scan == True:
                ntext2 = ntext2 + l
                scan = False
                break
        if ntext != "":
            replaces.append(ntext)
            text = text.replace(ntext2,"_NT"+str(x)+"_")
        x = x + 1
    x = 0
    while "/" in text:
        scan = False
        path = ""
        for l in text:
            if l == "/":
                scan = True
                path = path + l
            elif l != " " and scan == True:
                path = path + l
            elif l == " " and scan == True:
                scan = False
                break
        if path != "":
            paths.append(path)
            text = text.replace(path,"_PATH"+str(x)+"_")
        x = x + 1
    
    #Add support later for predefined language packs
    if lang == False:
        try:
            lang = getSingleInfo("lang")
        except:
            lang = "en"
    if lang not in languages:
        loadLanguage(lang)
    if text in languages[lang.lower()]:
        rtext = languages[lang.lower()][text]
    else:
        try:
            rtext = gt.translate(text+" _END_ _END_",lang).encode('utf8')
            touch(root+"/configs/Language-"+lang.lower(),False)
            writeSingleInfo(text,rtext.replace("_END_",""),"Language-"+lang.lower(),False,False)
        except:
            rtext = text
    x = 0
    for p in paths:
        rtext = rtext.replace("_PATH"+str(x)+"_",p)
        x = x + 1
    x = 0
    for p in replaces:
        rtext = rtext.replace("_NT"+str(x)+"_",p)
        x = x + 1
    return rtext.replace("_END_","").replace("_NL_","\n").replace("_TB_","\t")
def dialogInfo(text,title="LiSpeak",notrans="",term=True):
    debug("Creating Info Dialog: "+text)
    if term == True:
        output(text)
    call(["zenity","--info","--text="+translate(text)+notrans,"--title="+translate(title)+""])
def dialogPrompt(text="Continue",title="LiSpeak",exit=False):
    text = translate(text)
    p = subprocess.Popen("zenity --question --text='"+text+"' --title="+translate(title)+"",shell=True,stderr=subprocess.PIPE)
    error = p.stderr.read()
    p.communicate()
    #code = p.stdout.read()
    #print code
    if "cannot open display" in error:
        return yn(text,exit)
    else:
        if p.returncode:
            if exit == False:
                return False
            else:
                sys.exit(1)
        else:
            return True
def cd(path):
    if not path.startswith("/"):
        path = os.getcwd()+"/"+path
    debug("Entering Directory: "+path)
    os.chdir(path)
def call(cmd,hide=True):
    if type(cmd) == str:
        cmd = [cmd]
    with open(os.devnull, 'wb') as devnull:
        debug("Calling Command: "+str(cmd))
        if hide==True:
            subprocess.check_call(cmd, stdout=devnull, stderr=subprocess.STDOUT)
        else:
            subprocess.check_call(cmd)
def displayOSWarning():
    d,v,j = platform.linux_distribution()
    if d != "":
        if d in approvedDistros:
            if v in approvedDistros[d]:
                output(d+" "+v+" is a supported operating system")
            else:
                dialogInfo(d+" is a supported operating system, but has not been tested on "+v+"\nLiSpeak may not work properly")
                dialogPrompt(exit=True)
        else:
            dialogInfo(d+" is NOT a supported operating system\nLiSpeak may not work properly")
            dialogPrompt(exit=True)
    else:
        dialogInfo("Your operating system could not be detected\nLiSpeak may not work properly")
        dialogPrompt(exit=True)
def touch(path,out=True):   
    if type(path)==str:
        if not os.path.exists(os.path.dirname(path)):
            createDirectory(os.path.dirname(path))
        if out:
            debug("Touching File: "+path)
        os.system("touch "+path)
    elif type(path)==list:
        for p in path:
            touch(p)
def output(text="",debugOnly=False):
    if quiet == False and (debugOnly == False or (debugMode == True)):
        print translate(text)
def debug(text):
    output(text,True)

def askInfo(title="LiSpeak User Configuration",text="User Information",askFor={},plugin="UserInfo"):
    title=translate(title)
    text = translate(text)
    if askFor == {}:
        askFor = [["first","First Name"],["last","Last Name"],["email","Email"],["lang","Language (en,es,fr)"],["wolf","Wolfram Alpha Key"]]
        text2 = ""
        for e in askFor:
            text2 = text2 + " --add-entry='"+translate(e[1])+"'"
        res = subprocess.Popen("zenity --forms "+text2+" --text='"+text+"' --title='"+title+"'", shell=True, stdout=subprocess.PIPE).communicate()[0].replace('\n','')
        res = res.split("|")
        x = 0
        data = {}
        for e in askFor:
            data[e[0]] = res[x]
            x = x + 1
        if plugin != False:
            data["ROOTDIR"] = installDir
            writeInfo(data,plugin)
        else:
            return data
        
def parseData(text):
    oData = text.split("\n")
    orig = {}
    for e in oData:
        if e.strip().startswith("#") == False and "=" in e:
            pre,suf = e.strip().split("=",1)
            suf = suf.strip()
            if pre in ['depends','types','lang','configs']:
                data = []
                for d in suf.split(','):
                    data.append(d)
                suf = data
            orig[pre.strip()] = suf
    return orig
    
def getInfo(plugin="UserInfo"):
    try:
        if plugin == "UserInfo":
            oFile = open(root+"/UserInfo")
        else:
            oFile = open(root+"/configs/"+plugin)
        oData = oFile.read()
        oFile.close()
        return parseData(oData)
    except:
        return {}
    
def homeDir():
    return home 
 
def displayNotification(text,text2 = False,image=False):
    if type(text) == list:
        for line in text:
            os.system("echo \""+translate(line)+"\n\" >> "+installDir+"/Microphone/result")
    else:
        if text2 == False:
            os.system("echo \""+translate(text)+"\n\" >> "+installDir+"/Microphone/result")
        else:
            os.system("echo \""+translate(text)+"\" >> "+installDir+"/Microphone/result")
    if text2 != False:
        os.system("echo \""+translate(text2)+"\n\" >> "+installDir+"/Microphone/result")
    if image != False:
        os.system("echo \""+image+"\n\" >> "+installDir+"/Microphone/result_image")
    os.system(installDir+"/pycmd result")
 
def getSingleInfo(item,plugin="UserInfo"):
    try:
        return getInfo(plugin)[item.upper()]
    except:
        return ""
    
def copy(src,dst=""):
    if type(src) == str and dst != "":
        if type(dst) == str:
            if os.path.exists(dst):
                delete(dst)
            if os.path.isdir(src):
                debug("Copying Directory: "+src+" to "+dst)
                shutil.copytree(src,dst)
            else:
                debug("Copying File: "+src+" to "+dst)
                shutil.copy(src,dst)
        elif type(dst) == list:
            for c in dst:
                copy(src,c)
    elif type(src) == list and dst == "":
        for c in src:
            copy(c[0],c[1])
    elif type(src) == list and type(dst) == str:
        for c in src:
            copy(c,dst)
def createDirectory(directory):
    if type(directory) == str:
        if not os.path.exists(directory):
            os.makedirs(directory)
            debug("Creating Directory: "+directory)
    elif type(directory)==list:
        for d in directory:
            createDirectory(d)
def delete(path):
    if type(path) == str:
        if os.path.exists(path):
            if os.path.isdir(path):
                debug("Deleting Directory: "+path)
                shutil.rmtree(path)
            else:
                debug("Deleting File: "+path)
                os.remove(path)
    elif type(path) == list:
        for p in path:
            delete(p)
   
def writeSingleInfo(item,new=False,plugin="UserInfo",upper=True,t=True):
    try:
        if upper:
            new = new.upper()
        writeInfo({item:new},plugin,upper,t)
        return True
    except:
        return False
 
def writeInfo(new,plugin="UserInfo",upper=True,t=True):
    if plugin == "UserInfo":
        path = root+"/UserInfo"
        new["ROOTDIR"] = installDir
    else:
        path = root+"/configs/"+plugin
    if t:
        touch(path)
    oFile = open(path)
    oData = oFile.read()
    oFile.close()
    orig = parseData(oData)
    data = new
    for e in orig:
        if e not in data:
            data[e] = orig[e]
    with open(path,'w') as info:
        info.write("#LiSpeak Config File: "+plugin)
        for each in data:
            d = data[each]
            if upper:
                each = each.upper()
            info.write("\n"+each+"="+d)
            
def sqlCheck(cur):
    cur.execute("CREATE TABLE IF NOT EXISTS plugins(id INTEGER PRIMARY KEY, name TEXT, identifier TEXT,type TEXT, version TEXT, author TEXT, binFiles TEXT,services TEXT, dicts TEXT, actions TEXT)")
            
def installPlugin(path,upgrading=False):
    dictionaries = []
    services = []
    executables = []
    complete = False
    config = root + "/config/"
    if path.endswith('.sp') or path.endswith('.tar.gz'):
        plugins = {}
        con = sql.connect(root+"/plugins.db")
        with con:
            cur = con.cursor()
            sqlCheck(cur)
            cur.execute("SELECT * FROM plugins")
            pluginList = cur.fetchall()
            for line in pluginList:
                pid,name,identifier,types,version,author,cmdfile,servicefiles,dictionaries,actions = line
                plugins[identifier] = [float(version),eval(cmdfile)]
        tar = tarfile.open(mode='r:gz',fileobj=file(path))
        dataf = tar.extractfile('main.info')
        data = dataf.read()
        dataf.close()
        data = parseData(data)       
        try:
            currentVersion = plugins[data['identifier']][0]
            version = float(data['version'])
            if currentVersion > version:
                output("A newer version is already installed")
            elif currentVersion == version:
                output("This version is already installed")
                if dialogPrompt("Reinstall?") == True:
                    removePlugin(identifier,True)
                    installPlugin(path)
            else:
                output("A previous version is already installed")
                if dialogPrompt("Upgrade?") == True:
                    removePlugin(identifier,True)
                    installPlugin(path)
        except:
            isntall = False
            userLang = getSingleInfo("lang")
            if userLang in data['lang']:
                output("This plugin is available in "+userLang)
                install = True
                installLang = userLang
            else:
                if len(data['lang']):
                    output("This plugin is only available in "+data['lang'][0])
                    installLang = data['lang'][0]
                    install = dialogPrompt("This plugin is only available in "+(",".join(data['lang']))+"\nInstall Anyway?")
                else:
                    while install == False:
                        output("This plugin is only available in "+data['lang'])
                        l = raw_input("Which language would you like to install it in?")
                        if l in data['lang']:
                            installLang = l
                            install = True
            while install == True and complete == False:
                actions = {}
                if "depends" in data:
                    depend = data['depends']
                    cmd = ["apt-get","install"]
                    cmd.extend(depend)
                    sudo(cmd)
                output("Installation is beginning")
                delete(root+"/"+data['identifier'])
                output("Extracting")
                tar.extractall(root+"/"+data['identifier'])
                if "commands" in data['types']:
                    output("Scanning Files")
                    try:
                        new = os.listdir(root+"/"+data['identifier']+"/bin")
                        executables = new
                        createDirectory(root+"/bin")
                        existing = os.listdir(root+"/bin")
                        for f in new:
                            if f in existing:
                                output("Conflict Found: "+f)
                                install = False
                        if install == False:
                            break
                        output("Moving Executables")
                        for f in new:
                            copy(root+"/"+data['identifier']+"/bin/"+f,root+"/bin/"+f)
                            os.system("chmod +x \""+root+"/bin/"+f+"\"")
                    except:
                        output("No Executable Files")
                    try:
                        dictionary = open(root+'/plugins.dic')
                    except:
                        touch(root+'/plugins.dic')
                        dictionary = open(root+'/plugins.dic')
                    text = dictionary.read()
                    dictionary.close()
                    actions = open(root+"/"+data['identifier']+"/dictionaries/"+installLang)
                    command = actions.read()
                    actions.close()
                    try:
                        dictionary = open(root+'/plugins.dic','w')
                        dictionary.write("#PLUGIN: "+data['identifier']+"\n")
                        dictionary.write(command)
                        dictionary.write("#END\n")
                        dictionary.write(text)
                    except:
                        output("Error Installing Plugin In main.dic")
                    dictionary.close()
                    try:
                        createDirectory(root+"/dictionaries")
                        new = os.listdir(root+"/"+data['identifier']+"/dictionaries")
                        for f in new:
                            if os.path.isdir(root+"/"+data['identifier']+"/dictionaries/"+f):
                                try:
                                    dictionary = open(root+'/dictionaries/'+f+'.dic')
                                except:
                                    touch(root+'/dictionaries/'+f+'.dic')
                                    dictionary = open(root+'/dictionaries/'+f+'.dic')
                                text = dictionary.read()
                                dictionary.close()
                                actions = open(root+"/"+data['identifier']+"/dictionaries/"+f+"/"+installLang)
                                command = actions.read()
                                actions.close()
                                try:
                                    dictionary = open(root+'/dictionaries/'+f+'.dic','w')
                                    dictionary.write("#PLUGIN: "+data['identifier']+"\n")
                                    dictionary.write(command)
                                    dictionary.write("#END\n")
                                    dictionary.write(text)
                                except:
                                    output("Error Installing Plugin In "+f+".dic")
                                dictionaries.append(f)
                    except:
                        output("Error Scanning Dictionaries")
                    descfile = open(root+"/"+data['identifier']+"/languages/"+installLang)
                    desc = descfile.read()
                    descfile.close()
                    desc = desc.split('\n')
                    actions = {}
                    for d in desc:
                        if ":" in d:
                            n = d.split(":",1)
                            actions[n[0]] = n[1]
                if "service" in data['types']:
                    output("Scanning Files")
                    new = os.listdir(root+"/"+data['identifier']+"/services")
                    services = new
                    createDirectory(root+"/services")
                    existing = os.listdir(root+"/services")
                    for f in new:
                        if f in existing:
                            output("Conflict Found: "+f)
                            install = False
                    if install == False:
                        break
                    output("Moving Services")
                    for f in new:
                       copy(root+"/"+data['identifier']+"/services/"+f,root+"/services/"+f+".service")
                if "mode" in data['types']:
                    output('Scanning Modes')
                    createDirectory(root+"/modes")
                    new = os.listdir(root+"/"+data['identifier']+"/modes")
                    for f in new:
                        if os.path.isdir(root+"/"+data['identifier']+"/modes/"+f):
                            try:
                                dictionary = open(root+'/modes/'+f)
                            except:
                                touch(root+'/modes/'+f)
                                dictionary = open(root+'/modes/'+f)
                            text = dictionary.read()
                            dictionary.close()
                            actions = open(root+"/"+data['identifier']+"/modes/"+f+"/"+installLang)
                            command = actions.read()
                            actions.close()
                            try:
                                dictionary = open(root+'/modes/'+f,'w')
                                dictionary.write("#PLUGIN: "+data['identifier']+"\n")
                                dictionary.write(command)
                                dictionary.write("#END\n")
                                dictionary.write(text)
                            except:
                                output("Error Installing Plugin In "+f)
                createDirectory(root+"/configs/")
                touch(root+"/configs/"+data['identifier'])
                con = sql.connect(root+"/plugins.db")
                with con:
                    cur = con.cursor()
                    sqlCheck(cur)
                    execline = "INSERT INTO plugins VALUES(NULL, \""+data['name']+"\", \""+str(data['identifier'])+"\", \""+str(data['types'])+"\", \""+str(data['version'])+"\", \""+data['author']+"\", \""+str(executables)+"\", \""+str(services)+"\", \""+str(dictionaries)+"\", \""+str(actions)+"\")"
                    cur.execute(execline)
                delete(root+"/"+data['identifier'])
                output("Done")
                complete = True
                
            if complete == False:
                output()
                output("Installation Cancelled")
                output()
            else:
                output()
                output("Installation Done!")
                output()
def pluginInfo(plugin):
    con = sql.connect(root+"/plugins.db")
    with con:
        cur = con.cursor()
        sqlCheck(cur)
        cur.execute("SELECT * FROM plugins")
        pluginList = cur.fetchall()
        for line in pluginList:
            pid,name,identifier,types,version,author,cmdfile,servicefiles,dictionaries,actions = line
            if identifier == plugin:
                output()
                output (name+" : "+identifier)
                output()
                output ("Author: "+author)
                output ("Version: "+version)
                output ("Types: "+str(types))
                if "commands" in types:
                    output ("Command(s): "+str(cmdfile))
                if "service" in types:
                    output ("Service(s): "+str(servicefiles))
                output ("Dictionaries: "+str(dictionaries))
                output ("Actions:")
                actions = eval(actions)
                for each in actions:
                    output ("\t"+each+"\t\t"+actions[each].replace('\n',''))
                output ("Commands:")
                dictionary = open(root+"/plugins.dic")
                adding = False
                for line in dictionary:
                    if adding == False:
                        add = False
                        if line.startswith('#PLUGIN: '):
                            if line.replace('#PLUGIN: ','').replace('\n','') == identifier:
                                add = False
                                adding = True
                    else:
                        add = True
                        if line == "#END\n":
                            adding = False
                            add = False
                    if add == True:
                            output ("\t"+line.replace('\n',''))
                dictionary.close()
def listPlugins():
    output()
    con = sql.connect(root+"/plugins.db")
    with con:
            cur = con.cursor()
            sqlCheck(cur)
            cur.execute("SELECT * FROM plugins")
            pluginList = cur.fetchall()
            for line in pluginList:
                pid,name,identifier,types,version,author,cmdfile,servicefiles,dictionaries,actions = line
                output(""+name+" : "+identifier+" v"+version)
                actions = eval(actions)
                for each in actions:
                    output("\t"+each+"\t^"+actions[each].replace('\n','')+"^")
                output()
def removePlugin(ridentifier,saveConfig=False):
    con = sql.connect(root+"/plugins.db")
    with con:
        cur = con.cursor()
        sqlCheck(cur)
        cur.execute("SELECT * FROM plugins")
        pluginList = cur.fetchall()
        for line in pluginList:
            pid,name,identifier,types,version,author,cmdfile,servicefiles,dictionaries,actions = line
            if identifier == ridentifier:
                output("Removing "+name)
                for cmd in eval(cmdfile):
                    output("Removing Executable: "+cmd)
                    delete(root+"/bin/"+cmd)
                for ser in eval(servicefiles):
                    output("Removing Service: "+ser)
                    delete(root+"/services/"+ser)
                if saveConfig == False:
                    output("Removing Config File")
                    delete(root+"/configs/"+identifier)
                output("Removng Dictionaries")
                for dic in eval(dictionaries):
                    dictionary = open(root+'/dictionaries/'+dic+'.dic')
                    text = ""
                    deleting = False
                    for line in dictionary:
                        if deleting == False:
                            add = True
                            if line.startswith('#PLUGIN: '):
                                if line.replace('#PLUGIN: ','').replace('\n','') == identifier:
                                    add = False
                                    deleting = True
                        else:
                            add = False
                            if line == "#END\n":
                                deleting = False
                        if add == True:
                            text = text + line
                    dictionary.close()
                    try:
                        dictionary = open(root+'/dictionaries/'+dic+'.dic','w')
                        dictionary.write(text)
                    except:
                        output("Error Cleaning "+dic+'.dic')
                    dictionary.close()
                dictionary = open(root+'/plugins.dic')
                text = ""
                deleting = False
                for line in dictionary:
                    if deleting == False:
                        add = True
                        if line.startswith('#PLUGIN: '):
                            if line.replace('#PLUGIN: ','').replace('\n','') == identifier:
                                add = False
                                deleting = True
                    else:
                        add = False
                        if line == "#END\n":
                            deleting = False
                    if add == True:
                        text = text + line
                dictionary.close()
                try:
                    dictionary = open(root+'/plugins.dic','w')
                    dictionary.write(text)
                except:
                    output("Error Cleaning plugins.dic")
                dictionary.close()
                cur.execute("DELETE FROM plugins WHERE id = "+str(pid))
quiet = False
debugMode = False
try:
    installDir = getSingleInfo("ROOTDIR")
    if installDir == "":
        installDir = os.path.dirname(os.path.realpath(__file__))
except:
    installDir = os.path.dirname(os.path.realpath(__file__))
writeSingleInfo("ROOTDIR",installDir)
try:
    import goslate
    gt = goslate.Goslate()
except:
    copyLibraries()
    import goslate
    gt = goslate.Goslate()

if __name__ == "__main__": 
    from gi.repository import Gtk 
    #args = sys.argv
    parser = argparse.ArgumentParser(description='LiSpeak - Linux Voice Command System')
    parser.add_argument("--setup",dest='setup',action='store_true',default=False,help=translate('Setup LiSpeak'))
    parser.add_argument('-i', metavar='file', type=str,help=translate('Install a plugin - plugin .sp or .tar.gz file'),default="")
    parser.add_argument('-r', metavar='plugin', type=str,help=translate('Remove the specified plugin'),default="")
    parser.add_argument('-p', metavar='name', type=str,help=translate('Install a plugin from the repo'),default="")
    parser.add_argument('-d', metavar='plugin', type=str,help=translate('Display info on a plugin'),default="")
    parser.add_argument('-l', dest='listPlugins', action='store_true',default=False,help=translate('List the installed plugins'))
    parser.add_argument('-f', dest='force', action='store_true',default=False,help=translate('Force installation with no confirmation.'))
    parser.add_argument("-q",dest='quiet',action='store_true',default=False,help=translate('Run the program with no output'))
    parser.add_argument("--oswarn",dest='warn',action='store_true',default=False,help=translate('Warn the user if their operating system is not supported'))
    parser.add_argument("--ask",dest='ask',action='store_true',default=False,help=translate('Ask the user to re-enter their info'))
    parser.add_argument("--debug",dest='debug',action='store_true',default=False,help=translate('Debug the program'))
    args = parser.parse_args()
    quiet = args.quiet
    debugMode = args.debug
    force = args.force
    debug(args)
    if args.warn:
        displayOSWarning()
    if args.ask:
        askInfo()
    if args.setup:
        setup()
    if args.r != "":
        removePlugin(args.r)
    if args.i != "":
        installPlugin(args.i)
    if args.p != "":
        downloadPackage(args.p)
    if args.listPlugins:
        listPlugins()
    if args.d != "":
        pluginInfo(args.p)
    if 1 == 2:#args[1] in commands:
        if len(args[2:]) > 2:
            r = commands[args[1]](args[2:])
            if r != None:
                print r
        else:
            try:
                r = commands[args[1]](args[2],args[3])
                if r != None:
                    print r
            except IndexError as e:
                try:
                    r = commands[args[1]](args[2])
                    if r != None:
                      print r
                except IndexError as e:
                    r = commands[args[1]]()
                    if r != None:
                        print r
    #else:
    #    print "Invalid Argument:",args[1]
    #    print
    #    print "Valid Commands:"
    #    for e in commands:
    #        print e
else:
    quiet = True
    debugMode = True
    force = True
